[{"D:\\todolist-16\\src\\app\\store.ts":"1","D:\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"2","D:\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","D:\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx":"4","D:\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"5","D:\\todolist-16\\src\\app\\App.tsx":"6","D:\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"7","D:\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"8","D:\\todolist-16\\src\\index.tsx":"9","D:\\todolist-16\\src\\api\\todolists-api.ts":"10","D:\\todolist-16\\src\\features\\Login\\Login.tsx":"11","D:\\todolist-16\\src\\features\\Login\\auth-reducer.ts":"12","D:\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"13","D:\\todolist-16\\src\\app\\app-reducer.ts":"14","D:\\todolist-16\\src\\utils\\error-utils.ts":"15","D:\\ToDoList\\src\\reportWebVitals.ts":"16","D:\\ToDoList\\src\\features\\Login\\auth-reducer.ts":"17","D:\\ToDoList\\src\\features\\TodolistsList\\todolists-reducer.ts":"18","D:\\ToDoList\\src\\features\\TodolistsList\\TodolistsList.tsx":"19","D:\\ToDoList\\src\\components\\AddItemForm\\AddItemForm.tsx":"20","D:\\ToDoList\\src\\components\\EditableSpan\\EditableSpan.tsx":"21","D:\\ToDoList\\src\\index.tsx":"22","D:\\ToDoList\\src\\app\\app-reducer.ts":"23","D:\\ToDoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"24","D:\\ToDoList\\src\\features\\Login\\Login.tsx":"25","D:\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"26","D:\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"27","D:\\ToDoList\\src\\features\\TodolistsList\\tasks-reducer.ts":"28","D:\\ToDoList\\src\\api\\todolists-api.ts":"29","D:\\ToDoList\\src\\app\\store.ts":"30","D:\\ToDoList\\src\\app\\App.tsx":"31","D:\\ToDoList\\src\\utils\\error-utils.ts":"32"},{"size":1097,"mtime":1597327450000,"results":"33","hashOfConfig":"34"},{"size":4585,"mtime":1597327450000,"results":"35","hashOfConfig":"34"},{"size":1092,"mtime":1596716576000,"results":"36","hashOfConfig":"34"},{"size":1595,"mtime":1596715562000,"results":"37","hashOfConfig":"38"},{"size":952,"mtime":1594154724000,"results":"39","hashOfConfig":"34"},{"size":2616,"mtime":1614275363950,"results":"40","hashOfConfig":"34"},{"size":1773,"mtime":1596295538000,"results":"41","hashOfConfig":"38"},{"size":4193,"mtime":1596715250000,"results":"42","hashOfConfig":"34"},{"size":740,"mtime":1614267838692,"results":"43","hashOfConfig":"38"},{"size":3051,"mtime":1614275079609,"results":"44","hashOfConfig":"34"},{"size":3551,"mtime":1614274871178,"results":"45","hashOfConfig":"34"},{"size":2344,"mtime":1614274937082,"results":"46","hashOfConfig":"38"},{"size":4018,"mtime":1614273096063,"results":"47","hashOfConfig":"38"},{"size":1689,"mtime":1614274443724,"results":"48","hashOfConfig":"38"},{"size":811,"mtime":1596719330000,"results":"49","hashOfConfig":"38"},{"size":425,"mtime":1607869388000,"results":"50","hashOfConfig":"51"},{"size":2344,"mtime":1614274937082,"results":"52","hashOfConfig":"51"},{"size":4585,"mtime":1597327450000,"results":"53","hashOfConfig":"51"},{"size":4018,"mtime":1614273096063,"results":"54","hashOfConfig":"51"},{"size":1595,"mtime":1596715562000,"results":"55","hashOfConfig":"51"},{"size":952,"mtime":1594154724000,"results":"56","hashOfConfig":"51"},{"size":740,"mtime":1614267838692,"results":"57","hashOfConfig":"51"},{"size":1689,"mtime":1614274443724,"results":"58","hashOfConfig":"51"},{"size":1092,"mtime":1596716576000,"results":"59","hashOfConfig":"51"},{"size":3551,"mtime":1614274871178,"results":"60","hashOfConfig":"51"},{"size":4193,"mtime":1596715250000,"results":"61","hashOfConfig":"51"},{"size":1773,"mtime":1596295538000,"results":"62","hashOfConfig":"51"},{"size":5633,"mtime":1596722126000,"results":"63","hashOfConfig":"51"},{"size":3051,"mtime":1614275079609,"results":"64","hashOfConfig":"51"},{"size":1181,"mtime":1614271884991,"results":"65","hashOfConfig":"51"},{"size":2616,"mtime":1614275363950,"results":"66","hashOfConfig":"51"},{"size":811,"mtime":1596719330000,"results":"67","hashOfConfig":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"thpgos",{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"86rogs",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"1e5m1gs",{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"107"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"107"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"107"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"107"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"107"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\todolist-16\\src\\app\\store.ts",[],"D:\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["144"],"D:\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["145","146"],"D:\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx",["147","148","149"],"D:\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\todolist-16\\src\\app\\App.tsx",["150","151"],"D:\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["152","153","154"],"D:\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["155","156","157","158","159","160"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["161","162"],"D:\\todolist-16\\src\\index.tsx",[],"D:\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\todolist-16\\src\\features\\Login\\Login.tsx",["163"],"D:\\todolist-16\\src\\features\\Login\\auth-reducer.ts",["164","165"],"D:\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["166","167","168","169","170","171","172","173"],"D:\\todolist-16\\src\\app\\app-reducer.ts",[],"D:\\todolist-16\\src\\utils\\error-utils.ts",[],"D:\\ToDoList\\src\\reportWebVitals.ts",[],["174","175"],"D:\\ToDoList\\src\\features\\Login\\auth-reducer.ts",["176","177"],"import { Dispatch } from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setIsInitializedAC} from '../../app/app-reducer'\r\nimport {authAPI, dataType, todolistsAPI} from \"../../api/todolists-api\";\r\nimport {addTodolistAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data:dataType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(true))\r\n            }else{\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        dispatch(setIsInitializedAC(true))\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n",["178","179"],"D:\\ToDoList\\src\\features\\TodolistsList\\todolists-reducer.ts",["180"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","D:\\ToDoList\\src\\features\\TodolistsList\\TodolistsList.tsx",["181","182","183","184","185","186","187","188"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn= useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\ToDoList\\src\\components\\AddItemForm\\AddItemForm.tsx",["189","190","191"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\ToDoList\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\ToDoList\\src\\index.tsx",[],"D:\\ToDoList\\src\\app\\app-reducer.ts",[],"D:\\ToDoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\ToDoList\\src\\features\\Login\\Login.tsx",["192"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn= useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email Required!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password Required!'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be more than 2 symbols!'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            control={<Checkbox/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["193","194","195","196","197","198"],"D:\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["199","200","201"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\ToDoList\\src\\features\\TodolistsList\\tasks-reducer.ts",["202","203"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","D:\\ToDoList\\src\\api\\todolists-api.ts",[],"D:\\ToDoList\\src\\app\\store.ts",[],"D:\\ToDoList\\src\\app\\App.tsx",["204","205"],"D:\\ToDoList\\src\\utils\\error-utils.ts",[],{"ruleId":"206","severity":1,"message":"207","line":10,"column":45,"nodeType":"208","messageId":"209","endLine":10,"endColumn":47},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":2,"column":9,"nodeType":"216","messageId":"217","endLine":2,"endColumn":12},{"ruleId":"214","severity":1,"message":"218","line":2,"column":14,"nodeType":"216","messageId":"217","endLine":2,"endColumn":20},{"ruleId":"214","severity":1,"message":"219","line":2,"column":22,"nodeType":"216","messageId":"217","endLine":2,"endColumn":33},{"ruleId":"214","severity":1,"message":"220","line":4,"column":15,"nodeType":"216","messageId":"217","endLine":4,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":26,"column":7,"nodeType":"223","endLine":26,"endColumn":9,"suggestions":"224"},{"ruleId":"221","severity":1,"message":"225","line":15,"column":97,"nodeType":"223","endLine":15,"endColumn":130,"suggestions":"226"},{"ruleId":"221","severity":1,"message":"225","line":20,"column":8,"nodeType":"223","endLine":20,"endColumn":41,"suggestions":"227"},{"ruleId":"221","severity":1,"message":"225","line":24,"column":8,"nodeType":"223","endLine":24,"endColumn":41,"suggestions":"228"},{"ruleId":"221","severity":1,"message":"229","line":35,"column":8,"nodeType":"223","endLine":35,"endColumn":10,"suggestions":"230"},{"ruleId":"221","severity":1,"message":"225","line":39,"column":8,"nodeType":"223","endLine":39,"endColumn":42,"suggestions":"231"},{"ruleId":"221","severity":1,"message":"225","line":46,"column":8,"nodeType":"223","endLine":46,"endColumn":54,"suggestions":"232"},{"ruleId":"221","severity":1,"message":"225","line":48,"column":95,"nodeType":"223","endLine":48,"endColumn":134,"suggestions":"233"},{"ruleId":"221","severity":1,"message":"225","line":49,"column":101,"nodeType":"223","endLine":49,"endColumn":140,"suggestions":"234"},{"ruleId":"221","severity":1,"message":"225","line":50,"column":107,"nodeType":"223","endLine":50,"endColumn":146,"suggestions":"235"},{"ruleId":"210","replacedBy":"236"},{"ruleId":"212","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":57,"column":32,"nodeType":"240","endLine":57,"endColumn":49},{"ruleId":"214","severity":1,"message":"241","line":3,"column":28,"nodeType":"216","messageId":"217","endLine":3,"endColumn":40},{"ruleId":"214","severity":1,"message":"242","line":4,"column":9,"nodeType":"216","messageId":"217","endLine":4,"endColumn":22},{"ruleId":"221","severity":1,"message":"243","line":36,"column":8,"nodeType":"223","endLine":36,"endColumn":10,"suggestions":"244"},{"ruleId":"221","severity":1,"message":"245","line":41,"column":8,"nodeType":"223","endLine":41,"endColumn":10,"suggestions":"246"},{"ruleId":"221","severity":1,"message":"245","line":46,"column":8,"nodeType":"223","endLine":46,"endColumn":10,"suggestions":"247"},{"ruleId":"221","severity":1,"message":"245","line":51,"column":8,"nodeType":"223","endLine":51,"endColumn":10,"suggestions":"248"},{"ruleId":"221","severity":1,"message":"245","line":56,"column":8,"nodeType":"223","endLine":56,"endColumn":10,"suggestions":"249"},{"ruleId":"221","severity":1,"message":"245","line":61,"column":8,"nodeType":"223","endLine":61,"endColumn":10,"suggestions":"250"},{"ruleId":"221","severity":1,"message":"245","line":66,"column":8,"nodeType":"223","endLine":66,"endColumn":10,"suggestions":"251"},{"ruleId":"221","severity":1,"message":"245","line":71,"column":8,"nodeType":"223","endLine":71,"endColumn":10,"suggestions":"252"},{"ruleId":"210","replacedBy":"253"},{"ruleId":"212","replacedBy":"254"},{"ruleId":"214","severity":1,"message":"241","line":3,"column":28,"nodeType":"216","messageId":"217","endLine":3,"endColumn":40},{"ruleId":"214","severity":1,"message":"242","line":4,"column":9,"nodeType":"216","messageId":"217","endLine":4,"endColumn":22},{"ruleId":"210","replacedBy":"255"},{"ruleId":"212","replacedBy":"256"},{"ruleId":"206","severity":1,"message":"207","line":10,"column":45,"nodeType":"208","messageId":"209","endLine":10,"endColumn":47},{"ruleId":"221","severity":1,"message":"243","line":36,"column":8,"nodeType":"223","endLine":36,"endColumn":10,"suggestions":"257"},{"ruleId":"221","severity":1,"message":"245","line":41,"column":8,"nodeType":"223","endLine":41,"endColumn":10,"suggestions":"258"},{"ruleId":"221","severity":1,"message":"245","line":46,"column":8,"nodeType":"223","endLine":46,"endColumn":10,"suggestions":"259"},{"ruleId":"221","severity":1,"message":"245","line":51,"column":8,"nodeType":"223","endLine":51,"endColumn":10,"suggestions":"260"},{"ruleId":"221","severity":1,"message":"245","line":56,"column":8,"nodeType":"223","endLine":56,"endColumn":10,"suggestions":"261"},{"ruleId":"221","severity":1,"message":"245","line":61,"column":8,"nodeType":"223","endLine":61,"endColumn":10,"suggestions":"262"},{"ruleId":"221","severity":1,"message":"245","line":66,"column":8,"nodeType":"223","endLine":66,"endColumn":10,"suggestions":"263"},{"ruleId":"221","severity":1,"message":"245","line":71,"column":8,"nodeType":"223","endLine":71,"endColumn":10,"suggestions":"264"},{"ruleId":"214","severity":1,"message":"215","line":2,"column":9,"nodeType":"216","messageId":"217","endLine":2,"endColumn":12},{"ruleId":"214","severity":1,"message":"218","line":2,"column":14,"nodeType":"216","messageId":"217","endLine":2,"endColumn":20},{"ruleId":"214","severity":1,"message":"219","line":2,"column":22,"nodeType":"216","messageId":"217","endLine":2,"endColumn":33},{"ruleId":"238","severity":1,"message":"239","line":57,"column":32,"nodeType":"240","endLine":57,"endColumn":49},{"ruleId":"221","severity":1,"message":"229","line":35,"column":8,"nodeType":"223","endLine":35,"endColumn":10,"suggestions":"265"},{"ruleId":"221","severity":1,"message":"225","line":39,"column":8,"nodeType":"223","endLine":39,"endColumn":42,"suggestions":"266"},{"ruleId":"221","severity":1,"message":"225","line":46,"column":8,"nodeType":"223","endLine":46,"endColumn":54,"suggestions":"267"},{"ruleId":"221","severity":1,"message":"225","line":48,"column":95,"nodeType":"223","endLine":48,"endColumn":134,"suggestions":"268"},{"ruleId":"221","severity":1,"message":"225","line":49,"column":101,"nodeType":"223","endLine":49,"endColumn":140,"suggestions":"269"},{"ruleId":"221","severity":1,"message":"225","line":50,"column":107,"nodeType":"223","endLine":50,"endColumn":146,"suggestions":"270"},{"ruleId":"221","severity":1,"message":"225","line":15,"column":97,"nodeType":"223","endLine":15,"endColumn":130,"suggestions":"271"},{"ruleId":"221","severity":1,"message":"225","line":20,"column":8,"nodeType":"223","endLine":20,"endColumn":41,"suggestions":"272"},{"ruleId":"221","severity":1,"message":"225","line":24,"column":8,"nodeType":"223","endLine":24,"endColumn":41,"suggestions":"273"},{"ruleId":"214","severity":1,"message":"274","line":5,"column":9,"nodeType":"216","messageId":"217","endLine":5,"endColumn":22},{"ruleId":"206","severity":1,"message":"207","line":13,"column":94,"nodeType":"208","messageId":"209","endLine":13,"endColumn":96},{"ruleId":"214","severity":1,"message":"220","line":4,"column":15,"nodeType":"216","messageId":"217","endLine":4,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":26,"column":7,"nodeType":"223","endLine":26,"endColumn":9,"suggestions":"275"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["276"],"no-negated-in-lhs",["277"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.","'Router' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["278"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["279"],["280"],["281"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["282"],["283"],["284"],["285"],["286"],["287"],["276"],["277"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'todolistsAPI' is defined but never used.","'addTodolistAC' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["288"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["289"],["290"],["291"],["292"],["293"],["294"],["295"],["276"],["277"],["276"],["277"],["296"],["297"],["298"],["299"],["300"],["301"],["302"],["303"],["304"],["305"],["306"],["307"],["308"],["309"],["310"],["311"],["312"],"'setAppErrorAC' is defined but never used.",["313"],"no-global-assign","no-unsafe-negation",{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"316","fix":"318"},{"desc":"316","fix":"319"},{"desc":"320","fix":"321"},{"desc":"316","fix":"322"},{"desc":"316","fix":"323"},{"desc":"316","fix":"324"},{"desc":"316","fix":"325"},{"desc":"316","fix":"326"},{"desc":"327","fix":"328"},{"desc":"314","fix":"329"},{"desc":"314","fix":"330"},{"desc":"314","fix":"331"},{"desc":"314","fix":"332"},{"desc":"314","fix":"333"},{"desc":"314","fix":"334"},{"desc":"314","fix":"335"},{"desc":"327","fix":"336"},{"desc":"314","fix":"337"},{"desc":"314","fix":"338"},{"desc":"314","fix":"339"},{"desc":"314","fix":"340"},{"desc":"314","fix":"341"},{"desc":"314","fix":"342"},{"desc":"314","fix":"343"},{"desc":"320","fix":"344"},{"desc":"316","fix":"345"},{"desc":"316","fix":"346"},{"desc":"316","fix":"347"},{"desc":"316","fix":"348"},{"desc":"316","fix":"349"},{"desc":"316","fix":"350"},{"desc":"316","fix":"351"},{"desc":"316","fix":"352"},{"desc":"314","fix":"353"},"Update the dependencies array to be: [dispatch]",{"range":"354","text":"355"},"Update the dependencies array to be: [props]",{"range":"356","text":"357"},{"range":"358","text":"357"},{"range":"359","text":"357"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"360","text":"361"},{"range":"362","text":"357"},{"range":"363","text":"357"},{"range":"364","text":"357"},{"range":"365","text":"357"},{"range":"366","text":"357"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"367","text":"368"},{"range":"369","text":"355"},{"range":"370","text":"355"},{"range":"371","text":"355"},{"range":"372","text":"355"},{"range":"373","text":"355"},{"range":"374","text":"355"},{"range":"375","text":"355"},{"range":"376","text":"368"},{"range":"377","text":"355"},{"range":"378","text":"355"},{"range":"379","text":"355"},{"range":"380","text":"355"},{"range":"381","text":"355"},{"range":"382","text":"355"},{"range":"383","text":"355"},{"range":"384","text":"361"},{"range":"385","text":"357"},{"range":"386","text":"357"},{"range":"387","text":"357"},{"range":"388","text":"357"},{"range":"389","text":"357"},{"range":"390","text":"357"},{"range":"391","text":"357"},{"range":"392","text":"357"},{"range":"393","text":"355"},[1223,1225],"[dispatch]",[765,798],"[props]",[1071,1104],[1261,1294],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[1316,1318],"[demo, dispatch, isLoggedIn]",[1487,1489],[1658,1660],[1863,1865],[2076,2078],[2277,2279],[2424,2426],[2603,2605],[1316,1318],[1487,1489],[1658,1660],[1863,1865],[2076,2078],[2277,2279],[2424,2426],[2603,2605],[1464,1466],[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294],[1223,1225]]